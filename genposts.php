<?php
require 'vendor/autoload.php';

$posts = array();
$postDir = __DIR__.'/views/posts/';
foreach (scandir($postDir) as $filename) {
   $post = parsePost($postDir, $filename);

   if ($post != null) {
      $posts[$post->posted->timestamp] = $post;
   }
}

krsort($posts);
writePosts($posts, __DIR__.'/posts.php');

function parsePost($dir, $filename)
{
   $posts = array();

   if (preg_match('/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})-(.+)\.php$/', $filename, $matches) === 1) {
      $posted = \Carbon\Carbon::create($matches[1], $matches[2], $matches[3], 12);
      $slug = $matches[4];
      $title = getPostTitle($dir.$filename);
      if (strlen($title) > 0) {
         return new Post($title, $slug, $posted);
      }
   }

   return null;
}

function getPostTitle($file)
{
   $lines = file($file);
   if (preg_match('@^\<\?\/\*(.+)\*\/\?\>$@', trim($lines[0]), $matches) === 1) {
      return $matches[1];
   }

   return null;
}

function writePosts($posts, $file)
{
   $s  = '<?php' . PHP_EOL . PHP_EOL;
   $s .= '/***** This code is autogenerated by the "genposts.php" script.  Do not hand modify this code! *****/'. PHP_EOL . PHP_EOL;
   $s .= sprintf('$posts_order = array(); $posts = array();%s', PHP_EOL, PHP_EOL);

   $cnt = count($posts) - 1;
   foreach ($posts as $post) {
      $s .= sprintf('$posts_order["%s"] = %s;%s', $post->slug, $cnt, PHP_EOL);
      $s .= sprintf('$posts[%s] = new Post(\'%s\', "%s", \Carbon\Carbon::createFromTimestamp(%d));%s', $cnt, str_replace("'", "\\'", $post->title), $post->slug, $post->posted->timestamp, PHP_EOL);
      $cnt--;
   }

   $s .= <<<'__POST__'

/***** This code is autogenerated by the "genposts.php" script.  Do not hand modify this code! *****/

interface IPosts
{
   public function findAll();
   public function findBySlug($slug);
   public function next(Post $post);
   public function prev(Post $post);
}

class Posts implements IPosts
{
   // [#] => Post
   private $posts;

   // [slug] => #
   private $posts_order;

   public function __construct(array $posts_order, array $posts)
   {
      $this->posts_order = $posts_order;
      $this->posts = $posts;
   }

   public function findAll()
   {
      return $this->posts;
   }

   public function findBySlug($slug)
   {
      if (!array_key_exists($slug, $this->posts_order)) {
         return null;
      }

      $i = $this->posts_order[$slug];

      return array_key_exists($i, $this->posts) ? $this->posts[$i] : null;
   }

   public function next(Post $post)
   {
      if (!array_key_exists($post->slug, $this->posts_order)) {
         return null;
      }

      $i = $this->posts_order[$post->slug];

      return (++$i < count($this->posts)) ? $this->posts[$i] : null;
   }

   public function prev(Post $post)
   {
      if (!array_key_exists($post->slug, $this->posts_order)) {
         return null;
      }

      $i = $this->posts_order[$post->slug];

      return (--$i >= 0) ? $this->posts[$i] : null;
   }
}

$posts = new Posts($posts_order, $posts);

__POST__;

   file_put_contents($file, $s);
}
